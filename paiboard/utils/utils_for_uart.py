import binascii,time

def serialConfig(globalSignalDelay = 92):
    import serial

    ser = serial.Serial("/dev/ttyUSB0", 9600)
    if ser.isOpen():                        # 判断串口是否成功打开
        print("[Info]  : Serial Open.")
    else:
        print("[Error] : Serial Not Open.")
        return 1

    # b = hex(globalSignalDelay)[2:]
    b = '{:02x}'.format(globalSignalDelay)
    uarthex = bytes.fromhex('FF FF FF FF FF FF FF FE 64 05 90 00 ' + b +' F8 C8')   # 312M
    # uarthex = bytes.fromhex('FF FF FF FF FF FF FF FE 6C 05 B0 00 ' + b +' F8 C8')   # 336M
    # uarthex = bytes.fromhex('FF FF FF FF FF FF FF FE 38 00 E0 00 ' + b +' F8 C8')   # 360M
    # uarthex = bytes.fromhex('FF FF FF FF FF FF FF FE 3C 00 F0 00 ' + b +' F8 C8')   # 384M
    # uarthex = bytes.fromhex('FF FF FF FF FF FF FF FE 40 00 10 00 ' + b +' F8 C8')   # 408M error
    # uarthex = bytes.fromhex('FF FF FF FF FF FF FF FE 50 01 40 00 ' + b +' F8 C8')   # 504M
    # uarthex = bytes.fromhex('FF FF FF FF FF FF FF FE 60 01 80 00 ' + b +' F8 C8')   # 600M
    write_len=ser.write(uarthex)

    time.sleep(0.2)
    count = ser.inWaiting()

    data = None
    if count > 0:
        data=ser.read(count)
        if data!=b'':
            dataStr = str(binascii.b2a_hex(data))[2:-1]
            print("receive:",dataStr)
        else:
            return 2
        # if dataStr != 'fffffffffffffffe640590005cf8c8':
        #     return 3
    if data == None:
        return 4
    
    ser.close()
    if ser.isOpen():
        print("[Error] : Serial Not Close.")
    else:
        print("[Info]  : Serial Close. Uart send Done!")
    
    return 0


# FFFFFFFFFFFFFFFE 64 05 9 000 5CF8C8



# 22.5:FFFFFFFFFFFFFFFE383CE0006450C9
# 24  :FFFFFFFFFFFFFFFE3838E0006450C9
# 48  :FFFFFFFFFFFFFFFE3C1CF0006450C9
# 72  :FFFFFFFFFFFFFFFE3810E0006450C9
# 96  :FFFFFFFFFFFFFFFE3C0CF0006450C9
# 120 :FFFFFFFFFFFFFFFE3808E0006450C9
# 144 :FFFFFFFFFFFFFFFE440910006450C9
# 168 :FFFFFFFFFFFFFFFE500940006450C9
# 192 :FFFFFFFFFFFFFFFE3C04F0006450C9
# 216 :FFFFFFFFFFFFFFFE440510006450C9
# 240 :FFFFFFFFFFFFFFFE4C0530006450C9
# 264 :FFFFFFFFFFFFFFFE540550006450C9
# 288 :FFFFFFFFFFFFFFFE5C0570006450C9
# 312 :FFFFFFFFFFFFFFFE640590006450C9
# 336 :FFFFFFFFFFFFFFFE6C05B0006450C9
# 360 :FFFFFFFFFFFFFFFE3800E0006450C9
# 384 :FFFFFFFFFFFFFFFE3C00F0006450C9
# 408 :FFFFFFFFFFFFFFFE400100006450C9
# 432 :FFFFFFFFFFFFFFFE440110006450C9
# 456 :FFFFFFFFFFFFFFFE480120006450C9
# 480 :FFFFFFFFFFFFFFFE4C0130006450C9
# 504 :FFFFFFFFFFFFFFFE500140006450C9
# 528 :FFFFFFFFFFFFFFFE540150006450C9
# 552 :FFFFFFFFFFFFFFFE580160006450C9
# 576 :FFFFFFFFFFFFFFFE5C0170006450C9
# 600 :FFFFFFFFFFFFFFFE600180006450C9
# 624 :FFFFFFFFFFFFFFFE640190006450C9
# 648 :FFFFFFFFFFFFFFFE6801A0006450C8
# 672 :FFFFFFFFFFFFFFFE6C01B0006450C8
# 696 :FFFFFFFFFFFFFFFE7001C0006450C8
# 720 :FFFFFFFFFFFFFFFE7401D0006450C8
# 744 :FFFFFFFFFFFFFFFE7801E0006450C8
# 768 :FFFFFFFFFFFFFFFE7C01F0006450C8
# 792 :FFFFFFFFFFFFFFFE800200006450C8
# 816 :FFFFFFFFFFFFFFFE840210006450C8
# 840 :FFFFFFFFFFFFFFFE880220006450C8
# 864 :FFFFFFFFFFFFFFFE8C0230006450C8
# 888 :FFFFFFFFFFFFFFFE900240006450C8
# 912 :FFFFFFFFFFFFFFFE940250006450C8
# 936 :FFFFFFFFFFFFFFFE980260006450C8
# 960 :FFFFFFFFFFFFFFFE9C0270006450C8
# 984 :FFFFFFFFFFFFFFFEA00280006450C8
# 1008:FFFFFFFFFFFFFFFEA40290006450C8
# 1032:FFFFFFFFFFFFFFFEA802A0006450C8
# 1056:FFFFFFFFFFFFFFFEAC02B0006450C8
# 1080:FFFFFFFFFFFFFFFEB002C0006450C8
# 1104:FFFFFFFFFFFFFFFEB402D0006450C8
# 1128:FFFFFFFFFFFFFFFEB802E0006450C8
# 1152:FFFFFFFFFFFFFFFEBC02F0006450C8
# 1176:FFFFFFFFFFFFFFFEC00300006450C8
# 1200:FFFFFFFFFFFFFFFEC40310006450C8